#summary install and deploy the project, step by step

= Setup =

== Maven & Eclipse ==

For development we used the Google Web Toolkit [http://www.gwtproject.org/ GWT] - in a plugin form for Eclipse [https://developers.google.com/eclipse/?hl=de]. To manage all the additional libraries for the analysis, we made use of Maven - the [http://mojo.codehaus.org/gwt-maven-plugin/ Mojo GWT-Plugin] has all necessary parameters defined - but we have added a lifecycle mapping for eclipse:
{{{
pluginManagement>
	<plugins>
		<!--This plugin's configuration is used to store Eclipse m2e settings 
			only. It has no influence on the Maven build itself. -->
		<plugin>
			<groupId>org.eclipse.m2e</groupId>
			<artifactId>lifecycle-mapping</artifactId>
			<version>1.0.0</version>
			<configuration>
				<lifecycleMappingMetadata>
					<pluginExecutions>
						<pluginExecution>
							<pluginExecutionFilter>
								<groupId>org.codehaus.mojo</groupId>
								<artifactId>
									gwt-maven-plugin
								</artifactId>
								<versionRange>
									[2.5.0,)
								</versionRange>
								<goals>
									<goal>i18n</goal>
									<goal>generateAsync</goal>
								</goals>
							</pluginExecutionFilter>
							<action>
								<ignore></ignore>
							</action>
						</pluginExecution>
					</pluginExecutions>
				</lifecycleMappingMetadata>
			</configuration>
		</plugin>
	</plugins>
</pluginManagement>
}}}
Now the GWT project is Eclipse and Maven ready. To see how to use GWT have a look at the [https://code.google.com/p/twitterresearchproject/wiki/Visualization Visualization Chapter]. 

== RMI ==

For the [http://www.gwtproject.org/doc/latest/DevGuideServerCommunication.html client-server communication] we have used the !DataHelper class. Here are all required server actions bundled. We had some problems with reading data in the start period of the project so here are some important facts:
Ensure that every class you want to use is defined in your web.xml as a servlet:
{{{
  <servlet>
    <servlet-name>datahelper</servlet-name>
    <servlet-class>ude.SocialMediaExplorer.server.DataHelperServiceImpl</servlet-class>
  </servlet>
  
  <servlet-mapping>
    <servlet-name>datahelper</servlet-name>
    <url-pattern>/Start/datahelper</url-pattern>
  </servlet-mapping>
}}}
and that your class annotation uses the same name:
{{{
@RemoteServiceRelativePath( "datahelper" )
public interface IDataHelperService extends RemoteService {
...
}}}
This interface is our RMI contract which is called client-side via Proxy-object, which triggers the "real" (implemented) function on server-side. 
Because the path for reading and writing files is different in test and hosted mode, we will have a look at that:

=== Development Mode ===

In Development mode you can test your application. To view you app you have to install a GWT browser plugin. This plugin loads the pages with the generated !JavaScript. For Firefox you can get it i.e. here: [https://code.google.com/p/google-web-toolkit/downloads/detail?name=gwt-dev-plugin-1-24-rc.xpi].
Good to know:
 * To add additional folders in the Dev mode do the following
    # Go to Project Preferences
    # Deployment Assembly
    # add your path (i.e. files and /files)
Now you can use relative paths like in normal java program. 
 * If you start the Dev mode for the first time you will be asked for the war-directory 
    ** This is not the webapp folder but the target/SNAPSHOT folder (mojo plugin!)
 * You can change code on server side without recompiling (restart), but you have to restart for every client side change

=== Hosted Mode (Deployment) ===
To host the app you have to run a *maven install* on the project. Then copy the WAR or exploded webarchive on your server, but you have to check a few things *first*:
 * The GWT unit cache in /target must be empty (You can delete all folders but the /generated-sources folder)
 * Delete the Async interfaces for dev mode ( /target/generated-sources/... )
 * Set the path for the project_config.xml in Config.java and set the productionmode variable on true so the full path will be used (see example)
    ** This is the absolute path of your webapp on the server 
 * Copy the files to the specified path 
{{{
private static final String productionPrefix = "/usr/local/tomcat/apache-tomcat-6.0.37/webapps/ROOT/";
private static final boolean productionMode = true;
private static final String xmlPath = "files/project_config.xml";

public static String get_xmlPath() {
	if ( productionMode ) {
		return productionPrefix + xmlPath;
	}
	else {
		return xmlPath;
	}
}
...
}}}
<br />
<br />
== read more ==

  * [Purpose Purpose of the project]
  * [Data]
  * [Architecture]
  * [Setup]
  * [Crawler]
  * [Analysis] 
  * [Visualization]
  * [LimitationsOutlook]